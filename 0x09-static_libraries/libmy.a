!<arch>
0-isupper.c/    0           0     0     644     127       `
#include "main.h"
/**
 * _isupper - sorry i dont.
 * @c: parameter
 * Return: integer
 */
int _isupper(int c)
{
	return (0);
}

0-memset.c/     0           0     0     644     255       `
#include"main.h"
/**
 * _memset - fills memory with a constant byte
 * @n: parameter
 * @b: parameter
 * @s: pointer
 * Return: pointer
*/
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i = 0;
while (i < n)
{
s[i] = b;
i++;
}
return (s);
}

0-strcat.c/     0           0     0     644     411       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 * @dest: parameter
 * @src: parameter
 * Return:pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
	int i = 0;
	int e = 0;
	int k;
	int x = 0;
	int y = 0;

	while (dest[i] != '\0')
	{
		i++;
	}
	while (src[e] != '\0')
	{
		e++;
	}
	k = i + e;

	for (x = i; x <= k; x++)
	{
		dest[x] = src[y];
		y++;
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     116       `
#include "main.h"
/**
 * _atoi - ewsw mws
 * @s: pointer
 * Return: integer
 */
int _atoi(char *s)
{
	return (0);
}
1-isdigit.c/    0           0     0     644     127       `
#include "main.h"
/**
 * _isdigit - aswe axsd cde
 * @c: parameter
 * Return: integer
 */
int _isdigit(int c)
{
	return (0);
}

1-memcpy.c/     0           0     0     644     260       `
#include"main.h"
/**
 * _memcpy - copies memory area
 * @n: parameter
 * @dest: pointer
 * @src: pointer
 * Return: pointer
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i = 0;
while (i < n)
{
dest[i] = src[i];
i++;
}
return (dest);
}
1-strncat.c/    0           0     0     644     430       `
#include "main.h"
/**
 * _strncat - concatenates two strings
 * @dest: parameter
 * @src: parameter
 * @n: parameter
 * Return: string
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int w = 0;
	int x = 0;
	int y = 0;
	int r;

	while (dest[i] != '\0')
	{
		i++;
	}
	while (src[w] != '\0')
	{
		w++;
	}
	r = i + w;

	for (x = i; x < r; x++)
	{
		if (y < n)
		{
			dest[x] = src[y];
			y++;
		}
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     278       `
#include"main.h"
/**
 * _strchr - locates a character in a string
 * @c: parameter
 * @s: pointer
 * Return: pointer
*/
char *_strchr(char *s, char c)
{
int i = 0;
while (s[i] != '\0')
{
if (s[i] == c)
{
return (s + i);
}
i++;
}
if (c == '\0')
{
return (s + i);
}
return (0);
}
2-strlen.c/     0           0     0     644     123       `
#include "main.h"
/**
 * _strlen - length sedr
 * @s: pointer
 * Return: integer
 */
int _strlen(char *s)
{
	return (0);
}

2-strncpy.c/    0           0     0     644     355       `
#include "main.h"
/**
 * _strncpy - copies a string
 * @dest: parameter
 * @src: parameter
 * @n: parameter
 * Return: pointer
 */
char *_strncpy(char *dest, char *src, int n)
{
	int e = 0;
	int x = 0;
	int m;

	for (x = 0; x < n && src[e] != '\0'; x++)
	{
		dest[x] = src[e];
		e++;
	}

	for (m = x; m < n; m++)
	{
		dest[m] = '\0';
	}
	return (dest);
}

3-islower.c/    0           0     0     644     312       `
#include "main.h"
/**
 * _islower - tests whether a character is a
 * lowercase letter from the English alphabet.
 * @c: character to test.
 * Return: 1 if it is a lowercase letter, 0 if it is not a lowercase letter.
 */
int _islower(int c)
{
	/*des*/
	if (c <= 122 && c >= 97)
	{
		return (1);
	} return (0);
}
3-puts.c/       0           0     0     644     270       `
#include "main.h"
/**
 * _puts - prints a string, followed by a new line.
 * @str: input string.
 * Return: no return.
 */
void _puts(char *str)
{
	int x = 0;

	while (x >= 0)
	{
		if (str[x] == '\0')
		{
			_putchar('\n');
			break;
		}
		_putchar(str[x]);
		x++;
	}
}
3-strcmp.c/     0           0     0     644     307       `
#include "main.h"
/**
 * _strcmp - compares two strings.
 * @s1: pointer
 * @s2: pointer
 * Return: integer
 */
int _strcmp(char *s1, char *s2)
{
	int x = 0;
	int m;

	for (x = 0; s1[x] != '\0'; x++)
	{
		if (s1[x] == s2[x])
		{
			m = 0;
		} else
		{
			m = s1[x] - s2[x];
			break;
		}
	}
	return (m);

}

3-strspn.c/     0           0     0     644     326       `
#include"main.h"
/**
 * _strspn - gets the length of a prefix substring
 * @s: pointer
 * @accept: pointer
 * Return: integer
*/
unsigned int _strspn(char *s, char *accept)
{
int i = 0;
int m = 0;
while (accept[i] != '\0')
{
while (s[m] != '\0')
{
if (s[m] == accept[i])
{
return (m + 1);
} i++;
}
i = 0;
m++;
}
return (0);
}
4-isalpha.c/    0           0     0     644     349       `
#include "main.h"
/**
 * _isalpha - tests whether a character is a
 * lowercase letter from the English alphabet.
 * @c: character to test.
 * Return: 1 if it is a lowercase letter, 0 if it is not a lowercase letter.
 */
int _isalpha(int c)
{
	/*des*/
	if (c >= 65 && c <= 90)
		return (1);
	if (c >= 97 && c <= 122)
	{ return (1);
	} return (0);
}

4-strpbrk.c/    0           0     0     644     343       `
#include"main.h"
/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: pointer
 * @accept: pointer
 * Return: pointer
*/
char *_strpbrk(char *s, char *accept)
{
int i = 0;
int m = 0;
char *d = "nil";
while (s[m] != '\0')
{
for (i = 0; accept[i] != '\0';)
{
if (accept[i] == s[m])
{
return (s + m);
}
i++;
}
m++;
}
return (d);
}

5-strstr.c/     0           0     0     644     555       `
#include"main.h"
/**
 * _strstr - locates a substring
 * @haystack: pointer
 * @needle: pointer
 * Return: pointer
*/
char *_strstr(char *haystack, char *needle)
{
int x = 0;
int n = 0;
int i = 0;
int g = i + 1;
char *q = "nil";
if (needle[0] == '\0')
{
return (haystack);
}
for (n = 0; haystack[n] != '\0';)
{
if (haystack[n] == needle[i])
{
for (x = n + 1; needle[i] != '\0';)
{
if (haystack[x] == needle[g])
{
if (needle[g + 1] == '\0')
{
return (haystack + n);
}
else
g++;
x++;
continue;
}
else
n++;
i = 0;
break;
}
}
else
n++;
i = 0;
}
return (q);
}

6-abs.c/        0           0     0     644     114       `
#include "main.h"
/**
 * _abs - qwwe cfd
 * @n: parameter
 * Return: integer
 */
int _abs(int n)
{
	return (0);
}
9-strcpy.c/     0           0     0     644     407       `
#include "main.h"
#include <stdio.h>
/**
 * _strcpy - copies the string pointed to by src,
 * including the terminating null byte, to the
 * buffer pointed to by dest.
 * @dest: destination.
 * @src: source.
 * Return: the pointer to dest.
 */
char *_strcpy(char *dest, char *src)
{
	int t = 0;

	while (t >= 0)
	{
		*(dest + t) = *(src + t);
		if (*(src + t) == '\0')
			break;
		t++;
	}
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

